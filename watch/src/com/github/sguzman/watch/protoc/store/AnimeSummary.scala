// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.github.sguzman.watch.protoc.store

@SerialVersionUID(0L)
final case class AnimeSummary(
    title: _root_.scala.Predef.String = "",
    img: _root_.scala.Predef.String = "",
    link: _root_.scala.Predef.String = "",
    desc: _root_.scala.Predef.String = "",
    studio: _root_.scala.Predef.String = "",
    year: _root_.scala.Predef.String = "",
    rating: _root_.scala.Double = 0.0,
    showType: _root_.scala.Predef.String = "",
    genres: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[AnimeSummary] with scalapb.lenses.Updatable[AnimeSummary] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (title != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, title) }
      if (img != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, img) }
      if (link != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, link) }
      if (desc != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, desc) }
      if (studio != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, studio) }
      if (year != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, year) }
      if (rating != 0.0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(7, rating) }
      if (showType != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, showType) }
      genres.foreach(genres => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, genres))
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = title
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = img
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = link
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = desc
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = studio
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = year
        if (__v != "") {
          _output__.writeString(6, __v)
        }
      };
      {
        val __v = rating
        if (__v != 0.0) {
          _output__.writeDouble(7, __v)
        }
      };
      {
        val __v = showType
        if (__v != "") {
          _output__.writeString(8, __v)
        }
      };
      genres.foreach { __v =>
        _output__.writeString(9, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.github.sguzman.watch.protoc.store.AnimeSummary = {
      var __title = this.title
      var __img = this.img
      var __link = this.link
      var __desc = this.desc
      var __studio = this.studio
      var __year = this.year
      var __rating = this.rating
      var __showType = this.showType
      val __genres = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.genres)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __title = _input__.readString()
          case 18 =>
            __img = _input__.readString()
          case 26 =>
            __link = _input__.readString()
          case 34 =>
            __desc = _input__.readString()
          case 42 =>
            __studio = _input__.readString()
          case 50 =>
            __year = _input__.readString()
          case 57 =>
            __rating = _input__.readDouble()
          case 66 =>
            __showType = _input__.readString()
          case 74 =>
            __genres += _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      com.github.sguzman.watch.protoc.store.AnimeSummary(
          title = __title,
          img = __img,
          link = __link,
          desc = __desc,
          studio = __studio,
          year = __year,
          rating = __rating,
          showType = __showType,
          genres = __genres.result()
      )
    }
    def withTitle(__v: _root_.scala.Predef.String): AnimeSummary = copy(title = __v)
    def withImg(__v: _root_.scala.Predef.String): AnimeSummary = copy(img = __v)
    def withLink(__v: _root_.scala.Predef.String): AnimeSummary = copy(link = __v)
    def withDesc(__v: _root_.scala.Predef.String): AnimeSummary = copy(desc = __v)
    def withStudio(__v: _root_.scala.Predef.String): AnimeSummary = copy(studio = __v)
    def withYear(__v: _root_.scala.Predef.String): AnimeSummary = copy(year = __v)
    def withRating(__v: _root_.scala.Double): AnimeSummary = copy(rating = __v)
    def withShowType(__v: _root_.scala.Predef.String): AnimeSummary = copy(showType = __v)
    def clearGenres = copy(genres = _root_.scala.collection.Seq.empty)
    def addGenres(__vs: _root_.scala.Predef.String*): AnimeSummary = addAllGenres(__vs)
    def addAllGenres(__vs: TraversableOnce[_root_.scala.Predef.String]): AnimeSummary = copy(genres = genres ++ __vs)
    def withGenres(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): AnimeSummary = copy(genres = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = title
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = img
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = link
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = desc
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = studio
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = year
          if (__t != "") __t else null
        }
        case 7 => {
          val __t = rating
          if (__t != 0.0) __t else null
        }
        case 8 => {
          val __t = showType
          if (__t != "") __t else null
        }
        case 9 => genres
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(title)
        case 2 => _root_.scalapb.descriptors.PString(img)
        case 3 => _root_.scalapb.descriptors.PString(link)
        case 4 => _root_.scalapb.descriptors.PString(desc)
        case 5 => _root_.scalapb.descriptors.PString(studio)
        case 6 => _root_.scalapb.descriptors.PString(year)
        case 7 => _root_.scalapb.descriptors.PDouble(rating)
        case 8 => _root_.scalapb.descriptors.PString(showType)
        case 9 => _root_.scalapb.descriptors.PRepeated(genres.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.github.sguzman.watch.protoc.store.AnimeSummary
}

object AnimeSummary extends scalapb.GeneratedMessageCompanion[com.github.sguzman.watch.protoc.store.AnimeSummary] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.github.sguzman.watch.protoc.store.AnimeSummary] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.github.sguzman.watch.protoc.store.AnimeSummary = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.github.sguzman.watch.protoc.store.AnimeSummary(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(5), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(6), 0.0).asInstanceOf[_root_.scala.Double],
      __fieldsMap.getOrElse(__fields.get(7), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(8), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.github.sguzman.watch.protoc.store.AnimeSummary] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.github.sguzman.watch.protoc.store.AnimeSummary(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Double]).getOrElse(0.0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = StoreProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = StoreProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.github.sguzman.watch.protoc.store.AnimeSummary(
  )
  implicit class AnimeSummaryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.github.sguzman.watch.protoc.store.AnimeSummary]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.github.sguzman.watch.protoc.store.AnimeSummary](_l) {
    def title: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.title)((c_, f_) => c_.copy(title = f_))
    def img: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.img)((c_, f_) => c_.copy(img = f_))
    def link: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.link)((c_, f_) => c_.copy(link = f_))
    def desc: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.desc)((c_, f_) => c_.copy(desc = f_))
    def studio: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.studio)((c_, f_) => c_.copy(studio = f_))
    def year: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.year)((c_, f_) => c_.copy(year = f_))
    def rating: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.rating)((c_, f_) => c_.copy(rating = f_))
    def showType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.showType)((c_, f_) => c_.copy(showType = f_))
    def genres: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.genres)((c_, f_) => c_.copy(genres = f_))
  }
  final val TITLE_FIELD_NUMBER = 1
  final val IMG_FIELD_NUMBER = 2
  final val LINK_FIELD_NUMBER = 3
  final val DESC_FIELD_NUMBER = 4
  final val STUDIO_FIELD_NUMBER = 5
  final val YEAR_FIELD_NUMBER = 6
  final val RATING_FIELD_NUMBER = 7
  final val SHOWTYPE_FIELD_NUMBER = 8
  final val GENRES_FIELD_NUMBER = 9
}
