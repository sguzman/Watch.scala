// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.github.sguzman.watch.protoc.store

@SerialVersionUID(0L)
final case class UserStats(
    watched: _root_.scala.Int = 0,
    watching: _root_.scala.Int = 0,
    wantToWatch: _root_.scala.Int = 0,
    stalled: _root_.scala.Int = 0,
    dropped: _root_.scala.Int = 0,
    wontWatch: _root_.scala.Int = 0
    ) extends scalapb.GeneratedMessage with scalapb.Message[UserStats] with scalapb.lenses.Updatable[UserStats] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (watched != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, watched) }
      if (watching != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, watching) }
      if (wantToWatch != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(3, wantToWatch) }
      if (stalled != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(4, stalled) }
      if (dropped != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(5, dropped) }
      if (wontWatch != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(6, wontWatch) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = watched
        if (__v != 0) {
          _output__.writeUInt32(1, __v)
        }
      };
      {
        val __v = watching
        if (__v != 0) {
          _output__.writeUInt32(2, __v)
        }
      };
      {
        val __v = wantToWatch
        if (__v != 0) {
          _output__.writeUInt32(3, __v)
        }
      };
      {
        val __v = stalled
        if (__v != 0) {
          _output__.writeUInt32(4, __v)
        }
      };
      {
        val __v = dropped
        if (__v != 0) {
          _output__.writeUInt32(5, __v)
        }
      };
      {
        val __v = wontWatch
        if (__v != 0) {
          _output__.writeUInt32(6, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.github.sguzman.watch.protoc.store.UserStats = {
      var __watched = this.watched
      var __watching = this.watching
      var __wantToWatch = this.wantToWatch
      var __stalled = this.stalled
      var __dropped = this.dropped
      var __wontWatch = this.wontWatch
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __watched = _input__.readUInt32()
          case 16 =>
            __watching = _input__.readUInt32()
          case 24 =>
            __wantToWatch = _input__.readUInt32()
          case 32 =>
            __stalled = _input__.readUInt32()
          case 40 =>
            __dropped = _input__.readUInt32()
          case 48 =>
            __wontWatch = _input__.readUInt32()
          case tag => _input__.skipField(tag)
        }
      }
      com.github.sguzman.watch.protoc.store.UserStats(
          watched = __watched,
          watching = __watching,
          wantToWatch = __wantToWatch,
          stalled = __stalled,
          dropped = __dropped,
          wontWatch = __wontWatch
      )
    }
    def withWatched(__v: _root_.scala.Int): UserStats = copy(watched = __v)
    def withWatching(__v: _root_.scala.Int): UserStats = copy(watching = __v)
    def withWantToWatch(__v: _root_.scala.Int): UserStats = copy(wantToWatch = __v)
    def withStalled(__v: _root_.scala.Int): UserStats = copy(stalled = __v)
    def withDropped(__v: _root_.scala.Int): UserStats = copy(dropped = __v)
    def withWontWatch(__v: _root_.scala.Int): UserStats = copy(wontWatch = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = watched
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = watching
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = wantToWatch
          if (__t != 0) __t else null
        }
        case 4 => {
          val __t = stalled
          if (__t != 0) __t else null
        }
        case 5 => {
          val __t = dropped
          if (__t != 0) __t else null
        }
        case 6 => {
          val __t = wontWatch
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(watched)
        case 2 => _root_.scalapb.descriptors.PInt(watching)
        case 3 => _root_.scalapb.descriptors.PInt(wantToWatch)
        case 4 => _root_.scalapb.descriptors.PInt(stalled)
        case 5 => _root_.scalapb.descriptors.PInt(dropped)
        case 6 => _root_.scalapb.descriptors.PInt(wontWatch)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.github.sguzman.watch.protoc.store.UserStats
}

object UserStats extends scalapb.GeneratedMessageCompanion[com.github.sguzman.watch.protoc.store.UserStats] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.github.sguzman.watch.protoc.store.UserStats] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.github.sguzman.watch.protoc.store.UserStats = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.github.sguzman.watch.protoc.store.UserStats(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(2), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(3), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(4), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(5), 0).asInstanceOf[_root_.scala.Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.github.sguzman.watch.protoc.store.UserStats] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.github.sguzman.watch.protoc.store.UserStats(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = StoreProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = StoreProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.github.sguzman.watch.protoc.store.UserStats(
  )
  implicit class UserStatsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.github.sguzman.watch.protoc.store.UserStats]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.github.sguzman.watch.protoc.store.UserStats](_l) {
    def watched: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.watched)((c_, f_) => c_.copy(watched = f_))
    def watching: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.watching)((c_, f_) => c_.copy(watching = f_))
    def wantToWatch: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.wantToWatch)((c_, f_) => c_.copy(wantToWatch = f_))
    def stalled: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.stalled)((c_, f_) => c_.copy(stalled = f_))
    def dropped: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.dropped)((c_, f_) => c_.copy(dropped = f_))
    def wontWatch: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.wontWatch)((c_, f_) => c_.copy(wontWatch = f_))
  }
  final val WATCHED_FIELD_NUMBER = 1
  final val WATCHING_FIELD_NUMBER = 2
  final val WANTTOWATCH_FIELD_NUMBER = 3
  final val STALLED_FIELD_NUMBER = 4
  final val DROPPED_FIELD_NUMBER = 5
  final val WONTWATCH_FIELD_NUMBER = 6
}
